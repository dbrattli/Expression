[tool.poetry]
name = "Expression"
version = "0.0.0" # NOTE: will be updated by publish script
description = "Practical functional programming for Python 3.11+"
readme = "README.md"
authors = ["Dag Brattli <dag.brattli@cognite.com>"]
license = "MIT License"
homepage = "https://github.com/cognitedata/Expression"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">= 3.11, < 4"
typing-extensions = "^4.10.0"

pydantic = {version = "^2.6.2", optional = true}

[tool.poetry.group.dev.dependencies]
pytest-asyncio = "^0.21.0"
pytest = "^7.2.0"
coverage = "^6.4.3"
coveralls = "^3.3.1"
pre-commit = "^3.6.2"
dunamai = "^1.12.0"
hypothesis = "^6.54.2"
ruff = "^0.2.0"


[tool.poetry.extras]
pydantic = ["pydantic"]
all = ["pydantic"]


[tool.ruff]
# Keep in sync with .pre-commit-config.yaml
line-length = 120
target-version = "py311"
# D100: Missing docstring in public module
# D104: Missing docstring in public package
# D105: Missing docstring in magic method
lint.ignore = ["D100", "D101", "D102", "D103", "D105", "D107"]
lint.select = ["D", "E", "W",  "F", "I", "T", "RUF", "TID", "UP"]
exclude = ["tests", "docs"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
lines-after-imports = 2
known-third-party = ["pytest"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "strict"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
